-- This file is generated by automatic tools.
library ieee;
use ieee.std_logic_1164.all;


entity L1_control is
  port (
    
    Wr             : in  std_logic;
    hit            : in  std_logic;
    dirty          : in  std_logic;
    done           : in  std_logic;
	state          : in  std_logic_vector(2 downto 0);
    hit_inc        : out std_logic;
    miss_inc       : out std_logic;
    cs             : out std_logic;
    oe             : out std_logic;
    we             : out std_logic;
    is_dirty       : out std_logic;
    enable_replace : out std_logic;
    recordData     : out std_logic;
    DataSrc        : out std_logic;
    DataInSrc      : out std_logic;
    TagSrc         : out std_logic;
    L2DataWr       : out std_logic;
    request        : out std_logic;
    ready          : out std_logic;
    next_state     : out std_logic_vector(2 downto 0));

end L1_control;

architecture struct of L1_control is

component not_gate is port(   
    x   : in  std_logic;
    z   : out std_logic);
end component;

component or_gate is port(   
    x   : in  std_logic;
    y   : in  std_logic;
    z   : out std_logic);
end component;

component l1_gate is port(
   op  : in  std_logic_vector(6 downto 0);
    sel:  in std_logic_vector(6 downto 0);
    z   : out std_logic);
end component;
component mux
  port (
    sel  : in  std_logic;
    src0 : in  std_logic;
    src1 : in  std_logic;
    z    : out std_logic);
end component;
component cmp_n
  generic (
    n : integer);
  port (
    a             : in  std_logic_vector(n-1 downto 0);
    b             : in  std_logic_vector(n-1 downto 0);
    a_eq_b        : out std_logic;
    a_gt_b        : out std_logic;
    a_lt_b        : out std_logic;
    signed_a_gt_b : out std_logic;
    signed_a_lt_b : out std_logic);
end component;



signal op: std_logic_vector(6 downto 0);
signal hit_inc1,hit_inc2: std_logic;
signal miss_inc1,miss_inc2,miss_inc3,miss_inc4,miss_inc5,miss_inc6: std_logic;
signal oe1,oe2,oe3,oe4,oe5,oe6,oe7,oe8:std_logic;
signal we1,we2,we3,we4,we5,we6:std_logic;
signal dirty1,dirty2,dirty3,dirty4,dirty5,dirty6,dirty7:std_logic;
signal record1,record2,record3,record4,record5,record6,record7,record8,record9,record10:std_logic;
signal datasrc1,datasrc2,datasrc3,datasrc4,datasrc5,datasrc6,datasrc7: std_logic;
signal datainsrc1,datainsrc2: std_logic;
signal tag1,tag2,tag3,tag4,tag5,tag6,tag7:std_logic;
signal ready1,ready2,ready3,ready4,ready5,ready6,ready7,ready8,ready9: std_logic;
signal next1,next2,next3,next4,next5,next6,next7,next8,next9: std_logic;
signal state1,state2,state3,state4,state5: std_logic;
signal nextstate1,nextstate2,nextstate3,nextstate4,nextstate5,nextstate6,nextstate7,nextstate8,nextstate9,nextstate10: std_logic;
signal initial_state : std_logic_vector(2 downto 0) := (others=>'0');
signal is_initial_state : std_logic;
signal dummie_gt : std_logic;
signal dummie_lt : std_logic;
signal dummie_sgt : std_logic;
signal dummie_slt : std_logic;
signal dirty_on_hit : std_logic;

begin
cmp_map : cmp_n generic map (
    n => 3)
    port map (
      a             => state,
      b             => initial_state,
      a_eq_b        => is_initial_state,
      a_gt_b        => dummie_gt,
      a_lt_b        => dummie_lt,
      signed_a_gt_b => dummie_sgt,
      signed_a_lt_b => dummie_slt);
	  
	    enable_dirty : mux port map (
    sel  => hit,
    src0 => dirty,
    src1 => '0',
    z    => dirty_on_hit);
	
	  dirty_in_address : mux port map (
    sel  => is_initial_state,
    src0 => '0',
    src1 => dirty_on_hit,
    z    => op(4));

  hit_in_address : mux port map (
    sel  => is_initial_state,
    src0 => '0',
    src1 => hit,
    z    => op(5));

  wr_in_address : mux port map (
    sel  => is_initial_state,
    src0 => '0',
    src1 => Wr,
    z    => op(6));
	  
	done_in_address : mux port map (
    sel  => is_initial_state,
    src0 => done,
    src1 => '0',
    z    => op(3));
	
 
    op(2 downto 0)<=state;

    l1_gate_1:  l1_gate port map(op, "0100000",hit_inc1);
    l1_gate_2:  l1_gate port map(op, "1100000",hit_inc2);
    or_gate_0: or_gate port map(hit_inc1,hit_inc2,hit_inc);
    
    l1_gate_3:  l1_gate port map(op, "0000000",miss_inc1);
    l1_gate_4:  l1_gate port map(op, "0010000",miss_inc2);
    l1_gate_5:  l1_gate port map(op, "1000000",miss_inc3);
    l1_gate_6:  l1_gate port map(op, "1010000",miss_inc4);
    or_gate_1: or_gate port map(miss_inc1,miss_inc2,miss_inc5);
    or_gate_2: or_gate port map(miss_inc3,miss_inc4,miss_inc6);
    or_gate_3: or_gate port map(miss_inc5,miss_inc6,miss_inc);
    
    l1_gate_7:  l1_gate port map(op, "0001001",oe1);
    l1_gate_8:  l1_gate port map(op, "0000011",oe2);
    l1_gate_9:  l1_gate port map(op, "0001011",oe3);
    l1_gate_10: l1_gate port map(op, "0001100",oe4);
    or_gate_4: or_gate port map(oe1,oe2,oe5);
    or_gate_5: or_gate port map(oe3,oe4,oe6);
    or_gate_6: or_gate port map(oe5,oe6,oe7);
    not_gate_0: not_gate port map(oe7,oe8);
    oe<=oe8;
    
    
    l1_gate_11:  l1_gate port map(op, "0001001",we1);
    l1_gate_12:  l1_gate port map(op, "0000011",we2);
    l1_gate_13:  l1_gate port map(op, "0001011",we3);
    l1_gate_14:  l1_gate port map(op, "0001100",we4);
    or_gate_7: or_gate port map(we1,we2,we5);
    or_gate_8: or_gate port map(we3,we4,we6);
    or_gate_9: or_gate port map(we5,we6,we);

    l1_gate_15:  l1_gate port map(op, "0000011",dirty1);
    l1_gate_16:  l1_gate port map(op, "0001011",dirty2);
    l1_gate_17:  l1_gate port map(op, "0000100",dirty3);
    l1_gate_18:  l1_gate port map(op, "0001100",dirty4);
    or_gate_10: or_gate port map(dirty1,dirty2,dirty5);
    or_gate_11: or_gate port map(dirty3,dirty4,dirty6);
    or_gate_12: or_gate port map(dirty5,dirty6,dirty7);
    
    is_dirty<=dirty7;
    enable_replace<=dirty7;
    
    l1_gate_19:  l1_gate port map(op, "0100000",record1);
    l1_gate_20:  l1_gate port map(op, "0000000",record2);
    l1_gate_21:  l1_gate port map(op, "0010000",record3);
    l1_gate_22:  l1_gate port map(op, "1100000",record4);
    l1_gate_23:  l1_gate port map(op, "1000000",record5);
    l1_gate_24:  l1_gate port map(op, "1010000",record6);
    or_gate_13: or_gate port map(record1,record2,record7);
    or_gate_14: or_gate port map(record3,record4,record8);
    or_gate_15: or_gate port map(record5,record6,record9);
    or_gate_16: or_gate port map(record7,record8,record10);
    or_gate_17: or_gate port map(record9,record10,recordData);
    
    
    l1_gate_25:  l1_gate port map(op, "0000001",datasrc1);
    l1_gate_26:  l1_gate port map(op, "0001001",datasrc2);
    l1_gate_27:  l1_gate port map(op, "0000100",datasrc3);
    l1_gate_28:  l1_gate port map(op, "0001100",datasrc4);
    or_gate_18: or_gate port map(datasrc1,datasrc2,datasrc5);
    or_gate_19: or_gate port map(datasrc3,datasrc4,datasrc6);
    or_gate_20: or_gate port map(datasrc5,datasrc6,datasrc7);
    DataSrc<=datasrc7;
    
    l1_gate_29:  l1_gate port map(op, "0000001",datainsrc1);
    l1_gate_30:  l1_gate port map(op, "0001001",datainsrc2);
    or_gate_21: or_gate port map(datainsrc1,datainsrc2,DataInSrc);
    
    l1_gate_31:  l1_gate port map(op, "0000010",tag1);
    l1_gate_32:  l1_gate port map(op, "0001010",tag2);
    l1_gate_33:  l1_gate port map(op, "0000101",tag3);
    l1_gate_34:  l1_gate port map(op, "0001101",tag4);
    or_gate_22: or_gate port map(tag1,tag2,tag5);
    or_gate_23: or_gate port map(tag3,tag4,tag6);
    or_gate_24: or_gate port map(tag5,tag6,tag7);
    
    TagSrc<=tag7;
    L2DataWr<=tag7;
    
    or_gate_25: or_gate port map(tag7,datasrc7,request);
    
    
        
    l1_gate_35:  l1_gate port map(op, "0100000",ready1);
    l1_gate_36:  l1_gate port map(op, "0001001",ready2);
    l1_gate_37:  l1_gate port map(op, "0000011",ready3);
    l1_gate_38:  l1_gate port map(op, "0001011",ready4);
    l1_gate_39:  l1_gate port map(op, "0001100",ready5);
    or_gate_39: or_gate port map(ready1,ready2,ready6);
    or_gate_26: or_gate port map(ready3,ready4,ready7);
    or_gate_27: or_gate port map(ready5,ready6,ready8);
    or_gate_28: or_gate port map(ready7,ready8,ready9);
    
    ready<=ready9;
    
    l1_gate_40:  l1_gate port map(op, "1000000",next1);
    l1_gate_41:  l1_gate port map(op, "1010000",next2);
    l1_gate_42:  l1_gate port map(op, "0000100",next3);
    l1_gate_43:  l1_gate port map(op, "0000101",next4);
    l1_gate_44:  l1_gate port map(op, "0001101",next5);
    or_gate_29: or_gate port map(next1,next2,next6);
    or_gate_30: or_gate port map(next3,next4,next7);
    or_gate_31: or_gate port map(next5,next6,next8);
    or_gate_32: or_gate port map(next7,next8,next9);
    
    next_state(2)<=next9;
    
    
    l1_gate_45:  l1_gate port map(op, "0010000",state1);
    l1_gate_46:  l1_gate port map(op, "1100000",state2);
    l1_gate_47:  l1_gate port map(op, "0000010",state3);
    or_gate_33: or_gate port map(state1,state2,state4);
    or_gate_40: or_gate port map(state3,state4,state5);
    
    next_state(1)<=state5;
    
    
    l1_gate_48:  l1_gate port map(op, "0000000",nextstate1);
    l1_gate_49:  l1_gate port map(op, "1100000",nextstate2);
    l1_gate_50:  l1_gate port map(op, "1010000",nextstate3);
    l1_gate_51:  l1_gate port map(op, "0000001",nextstate4);
    l1_gate_52:  l1_gate port map(op, "0001010",nextstate5);
    l1_gate_53:  l1_gate port map(op, "0000101",nextstate6);
    or_gate_34: or_gate port map(nextstate1,nextstate2,nextstate7);
    or_gate_35: or_gate port map(nextstate3,nextstate4,nextstate8);
    or_gate_36: or_gate port map(nextstate5,nextstate6,nextstate9);
    or_gate_37: or_gate port map(nextstate7,nextstate8,nextstate10);
    or_gate_38: or_gate port map(nextstate9,nextstate10,next_state(0));
   
    
    cs<='1';
    

end struct;



