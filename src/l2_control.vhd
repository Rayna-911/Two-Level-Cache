-- This file is generated by automatic tools.
library ieee;
use ieee.std_logic_1164.all;


entity L2_control is
  port (
     arst       : in  std_logic;
    request    : in  std_logic;
    L2DataWr   : in  std_logic;
    hit        : in  std_logic;
    state      : in  std_logic_vector(2 downto 0);
    hit_inc    : out std_logic;
    miss_inc   : out std_logic;
    cs         : out std_logic;
    oe         : out std_logic;
    we         : out std_logic;
    WrData     : out std_logic;
    read_cache : out std_logic;
    checkback  : out std_logic;
    rec_status : out std_logic;
    DataSrc    : out std_logic;
    DataInSrc  : out std_logic;
    done       : out std_logic;
    next_state : out std_logic_vector(2 downto 0);
	ReadHit_check: out std_logic

  );
end L2_control;

architecture struct of L2_control is

component cmp_n
  generic (
    n : integer);
  port (
    a             : in  std_logic_vector(n-1 downto 0);
    b             : in  std_logic_vector(n-1 downto 0);
    a_eq_b        : out std_logic;
    a_gt_b        : out std_logic;
    a_lt_b        : out std_logic;
    signed_a_gt_b : out std_logic;
    signed_a_lt_b : out std_logic);
end component;
component mux
  port (
    sel  : in  std_logic;
    src0 : in  std_logic;
    src1 : in  std_logic;
    z    : out std_logic);
end component;

component not_gate is port(   
    x   : in  std_logic;
    z   : out std_logic);
end component;

component or_gate is port(   
    x   : in  std_logic;
    y   : in  std_logic;
    z   : out std_logic);
end component;

component and_gate is port(   
    x   : in  std_logic;
    y   : in  std_logic;
    z   : out std_logic);
end component;

component l2_gate is port(
   op  : in  std_logic_vector(5 downto 0);
    sel:  in std_logic_vector(5 downto 0);
    z   : out std_logic);
end component;



signal op: std_logic_vector(5 downto 0);
signal hit_inc1,hit_inc2: std_logic;
signal miss_inc1,miss_inc2: std_logic;
signal oe1,oe2: std_logic;
signal we1,we2,we3,we4,we5,we6: std_logic;
signal wrdata1,wrdata2: std_logic;
signal read_cache1,read_cache2,read_cache3,read_cache4,read_cache5,read_cache6,read_cache7,read_cache8: std_logic;
signal initial_state : std_logic_vector(2 downto 0) := (others=>'0');
signal start : std_logic;
signal null_gt : std_logic;
signal null_lt : std_logic;
signal null_sgt : std_logic;
signal null_slt : std_logic;
signal L2DataWr_operation : std_logic;
signal hit_operation : std_logic;


signal done1,done2,done3,done4,done5,done6: std_logic;
signal next1,next2,next3,next4: std_logic;

signal not_L2read:std_logic;
begin
--new 12.10 for hit type check
not_op4_map: not_gate port map (op(4),not_L2read);
readhit_check_map: and_gate port map (op(5),not_L2read,ReadHit_check);

--end of 12.10

cmp_map : cmp_n generic map (
    n => 3)
    port map (
      a             => state,
      b             => initial_state,
      a_eq_b        => start,
      a_gt_b        => null_gt,
      a_lt_b        => null_lt,
      signed_a_gt_b => null_sgt,
      signed_a_lt_b => null_slt);

  enable_L2DataWr : and_gate port map (
    x => L2DataWr,
    y => request,
    z => L2DataWr_operation);

  enable_hit : and_gate port map (
    x => hit,
    y => request,
    z => hit_operation);
	
  hit_in_address : mux port map (
    sel  => start,
    src0 => '0',
    src1 => hit_operation,
    z    => op(3));

  L2DataWr_in_address : mux port map (
    sel  => start,
    src0 => '0',
    src1 => L2DataWr_operation,
    z    => op(4));

  request_in_address : mux port map (
    sel  => start,
    src0 => '0',
    src1 => request,
    z    => op(5));
  

    op(2 downto 0)<=state;

    
    l2_gate_1: l2_gate port map(op, "101000",hit_inc1);
    l2_gate_2: l2_gate port map(op, "111000",hit_inc2);
    or_gate_0: or_gate port map(hit_inc1,hit_inc2,hit_inc);
    
    l2_gate_3: l2_gate port map(op, "100000",miss_inc1);
    l2_gate_4: l2_gate port map(op, "110000",miss_inc2);
    or_gate_1: or_gate port map(miss_inc1,miss_inc2,miss_inc);
    
    cs<='1';
        
    l2_gate_5: l2_gate port map(op, "100000",oe1);
    l2_gate_6: l2_gate port map(op, "000010",oe2);
    or_gate_2: or_gate port map(oe1,oe2,oe);
    
    
    l2_gate_7:  l2_gate port map(op, "111000",we1);
    l2_gate_8:  l2_gate port map(op, "110000",we2);
    l2_gate_9:  l2_gate port map(op, "000011",we3);
    l2_gate_10: l2_gate port map(op, "000100",we4);
    or_gate_3: or_gate port map(we1,we2,we5);
    or_gate_4: or_gate port map(we3,we4,we6);
    or_gate_5: or_gate port map(we5,we6,we);
	
    
    l2_gate_11: l2_gate port map(op, "000010",wrdata1);
    l2_gate_12: l2_gate port map(op, "000011",wrdata2);
    or_gate_6: or_gate port map(wrdata1,wrdata2,WrData);
    

    l2_gate_13:  l2_gate port map(op, "000001",read_cache1);
    l2_gate_14:  l2_gate port map(op, "000010",read_cache2);
    l2_gate_15:  l2_gate port map(op, "000011",read_cache3);
    l2_gate_16:  l2_gate port map(op, "000100",read_cache4);
    or_gate_7: or_gate port map(read_cache1,read_cache2,read_cache5);
    or_gate_8: or_gate port map(read_cache3,read_cache4,read_cache6);
    or_gate_9: or_gate port map(read_cache5,read_cache6,read_cache7);
    not_gate_1: not_gate port map(read_cache7,read_cache8);
    
    l2_gate_17:  l2_gate port map(op, "000001",checkback);

    read_cache<=read_cache8;

    rec_status<=read_cache8;
    
    l2_gate_18:  l2_gate port map(op, "000011",DataSrc);
    
    l2_gate_19:  l2_gate port map(op, "000010",DataInSrc);
    
    l2_gate_20:  l2_gate port map(op, "000001",done1);
    l2_gate_21:  l2_gate port map(op, "000010",done2);
    l2_gate_22:  l2_gate port map(op, "000011",done3);
    l2_gate_23:  l2_gate port map(op, "000100",done4);
    or_gate_10: or_gate port map(done1,done2,done5);
    or_gate_11: or_gate port map(done3,done4,done6);
    or_gate_12: or_gate port map(done5,done6,done);
    
    
    l2_gate_24: l2_gate port map(op, "110000",next_state(2));
    

    l2_gate_25: l2_gate port map(op, "100000",next1);
    l2_gate_26: l2_gate port map(op, "111000",next2);
    or_gate_13: or_gate port map(next1,next2,next_state(1));
    
    l2_gate_27: l2_gate port map(op, "101000",next3);
    l2_gate_28: l2_gate port map(op, "111000",next4);
    or_gate_14: or_gate port map(next3,next4,next_state(0));


end struct;



